name: CI/CD - Test, Build, Secure, Deploy

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Run tests and linting
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Run tests
        run: npm test

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage
          path: coverage/

  # Job 2: Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Job 3: Build application
  build:
    name: Build Application
    needs: [test, security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job 4: Build and push Docker image
  docker:
    name: Build & Push Docker Image
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  # Job 5: Deploy to Hugging Face Spaces
  deploy-huggingface:
    name: Deploy to Hugging Face Spaces
    needs: [docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.10'

      - name: Install Hugging Face CLI
        run: |
          pip install --upgrade huggingface_hub

      - name: Deploy to Hugging Face Space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Configure git
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Login to Hugging Face
          huggingface-cli login --token $HF_TOKEN
          
          # Create or update the space
          huggingface-cli repo create ${{ github.repository }} --type space --space_sdk docker || true
          
          # Clone the space repository
          git clone https://huggingface.co/spaces/${{ github.repository }} hf-space || git clone https://huggingface.co/spaces/${{ github.repository_owner }}/agent4-implementation hf-space
          
          cd hf-space
          
          # Copy necessary files
          cp -r ../Dockerfile ../huggingface.yaml ../package*.json ../tsconfig.json ../src ../dist ./ || cp -r ../* ./
          
          # Create README for HF Space
          cat > README.md << 'EOF'
          ---
          title: Agent4 Multi-LLM
          emoji: ðŸ¤–
          colorFrom: blue
          colorTo: green
          sdk: docker
          app_port: 3000
          pinned: false
          ---
          
          # Agent 4 Multi-LLM Implementation
          
          A robust multi-LLM AI agent with automatic fallback support.
          
          ## Features
          - Multi-provider LLM support (Hugging Face, Mistral, DeepSeek, OpenRouter, Codestral)
          - Automatic fallback mechanism
          - Health monitoring
          - REST API interface
          
          ## API Endpoint
          POST /api/agent4/execute
          EOF
          
          # Commit and push
          git add .
          git commit -m "Deploy from GitHub Actions" || echo "No changes to commit"
          git push https://oauth2:${HF_TOKEN}@huggingface.co/spaces/${{ github.repository_owner }}/agent4-implementation main || git push https://oauth2:${HF_TOKEN}@huggingface.co/spaces/${{ github.repository }} main

      - name: Verify deployment
        run: |
          echo "âœ… Deployment to Hugging Face Spaces completed!"
          echo "ðŸ”— Space URL: https://huggingface.co/spaces/${{ github.repository }}"

  # Job 6: Notify on completion
  notify:
    name: Notify Deployment Status
    needs: [deploy-huggingface]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-huggingface.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Space**: https://huggingface.co/spaces/${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: ghcr.io/${{ github.repository }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
